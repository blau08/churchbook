"""Generated message classes for genomics version v1alpha2.

An API to store, process, explore, and share genomic data. It supports
reference-based alignments, genetic variants, and reference genomes. This API
provides an implementation of the Global Alliance for Genomics and Health
(GA4GH) v0.5.1 API as well as several extensions.
"""
# NOTE: This file is autogenerated and should not be edited by hand.

from googlecloudsdk.third_party.apitools.base.protorpclite import messages as _messages
from googlecloudsdk.third_party.apitools.base.py import encoding


package = 'genomics'


class CancelOperationRequest(_messages.Message):
  """The request message for Operations.CancelOperation."""


class Disk(_messages.Message):
  """A Google Compute Engine disk resource specification.

  Enums:
    TypeValueValuesEnum: The type of the disk to create, if applicable.

  Fields:
    autoDelete: Specifies whether or not to delete the disk when the pipeline
      completes. This field is applicable only for newly created disks. See ht
      tps://cloud.google.com/compute/docs/reference/latest/instances#resource
      for more details.
    name: Required. The name of the disk that can be used in the pipeline
      parameters. Must be 1 - 63 characters and match the regular expression
      [a-z]([-a-z0-9]*[a-z0-9])?
    readOnly: Specifies how a sourced-base persistent disk will be mounted.
      See https://cloud.google.com/compute/docs/disks/persistent-
      disks#use_multi_instances for more details.
    sizeGb: The size of the disk. This field is not applicable for local SSD.
    source: The full or partial URL of the persistent disk to attach. See
      https://cloud.google.com/compute/docs/reference/latest/instances#resourc
      e and https://cloud.google.com/compute/docs/disks/persistent-
      disks#snapshots for more details.
    type: The type of the disk to create, if applicable.
  """

  class TypeValueValuesEnum(_messages.Enum):
    """The type of the disk to create, if applicable.

    Values:
      TYPE_UNSPECIFIED: <no description>
      PERSISTENT_HDD: Specifies a Google Compute Engine persistent hard disk.
        See https://cloud.google.com/compute/docs/disks/persistent-
        disks#typeofdisks for details.
      PERSISTENT_SSD: Specifies a Google Compute Engine persistent solid-state
        disk. See https://cloud.google.com/compute/docs/disks/persistent-
        disks#typeofdisks for details.
      LOCAL_SSD: Specifies a Google Compute Engine local SSD. See
        https://cloud.google.com/compute/docs/disks/local-ssd for details.
    """
    TYPE_UNSPECIFIED = 0
    PERSISTENT_HDD = 1
    PERSISTENT_SSD = 2
    LOCAL_SSD = 3

  autoDelete = _messages.BooleanField(1)
  name = _messages.StringField(2)
  readOnly = _messages.BooleanField(3)
  sizeGb = _messages.IntegerField(4)
  source = _messages.StringField(5)
  type = _messages.EnumField('TypeValueValuesEnum', 6)


class DockerExecutor(_messages.Message):
  """The Docker execuctor specification.

  Fields:
    cmd: The command string to run.
    imageName: Image name from either Docker Hub or Google Container
      Repository. Users that run pipelines must have READ access to the image.
  """

  cmd = _messages.StringField(1)
  imageName = _messages.StringField(2)


class Empty(_messages.Message):
  """A generic empty message that you can re-use to avoid defining duplicated
  empty messages in your APIs. A typical example is to use it as the request
  or the response type of an API method. For instance:      service Foo {
  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);     }  The
  JSON representation for `Empty` is empty JSON object `{}`.
  """



class GenomicsOperationsCancelRequest(_messages.Message):
  """A GenomicsOperationsCancelRequest object.

  Fields:
    cancelOperationRequest: A CancelOperationRequest resource to be passed as
      the request body.
    name: The name of the operation resource to be cancelled.
  """

  cancelOperationRequest = _messages.MessageField('CancelOperationRequest', 1)
  name = _messages.StringField(2, required=True)


class GenomicsOperationsGetRequest(_messages.Message):
  """A GenomicsOperationsGetRequest object.

  Fields:
    name: The name of the operation resource.
  """

  name = _messages.StringField(1, required=True)


class GenomicsOperationsListRequest(_messages.Message):
  """A GenomicsOperationsListRequest object.

  Fields:
    filter: A string for filtering Operations. The following filter fields are
      supported&#58;  * projectId&#58; Required. Corresponds to
      OperationMetadata.projectId. * createTime&#58; The time this job was
      created, in seconds from the
      [epoch](http://en.wikipedia.org/wiki/Unix_time). Can use `>=` and/or
      `<=`   operators. * status&#58; Can be `RUNNING`, `SUCCESS`, `FAILURE`,
      or `CANCELED`. Only   one status may be specified.  Examples&#58;  *
      `projectId = my-project AND createTime >= 1432140000` * `projectId = my-
      project AND createTime >= 1432140000 AND createTime <= 1432150000 AND
      status = RUNNING`
    name: The name of the operation collection.
    pageSize: The maximum number of results to return. If unspecified,
      defaults to 256. The maximum value is 2048.
    pageToken: The standard list page token.
  """

  filter = _messages.StringField(1)
  name = _messages.StringField(2, required=True)
  pageSize = _messages.IntegerField(3, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(4)


class GenomicsPipelinesDeleteRequest(_messages.Message):
  """A GenomicsPipelinesDeleteRequest object.

  Fields:
    pipelineId: Caller must have WRITE access to the project in which this
      pipeline is defined.
  """

  pipelineId = _messages.StringField(1, required=True)


class GenomicsPipelinesGetRequest(_messages.Message):
  """A GenomicsPipelinesGetRequest object.

  Fields:
    pipelineId: Caller must have READ access to the project in which this
      pipeline is defined.
  """

  pipelineId = _messages.StringField(1, required=True)


class ImportReadGroupSetsResponse(_messages.Message):
  """The read group set import response.

  Fields:
    readGroupSetIds: IDs of the read group sets that were created.
  """

  readGroupSetIds = _messages.StringField(1, repeated=True)


class ImportVariantsResponse(_messages.Message):
  """The variant data import response.

  Fields:
    callSetIds: IDs of the call sets created during the import.
  """

  callSetIds = _messages.StringField(1, repeated=True)


class ListOperationsResponse(_messages.Message):
  """The response message for Operations.ListOperations.

  Fields:
    nextPageToken: The standard List next-page token.
    operations: A list of operations that matches the specified filter in the
      request.
  """

  nextPageToken = _messages.StringField(1)
  operations = _messages.MessageField('Operation', 2, repeated=True)


class ListPipelinesRequest(_messages.Message):
  """A request to list pipelines in a given project. Pipelines can be filtered
  by name using name_prefix: all pipelines with names that begin with
  name_prefix will be returned. Uses standard pagination: page_size indicates
  how many pipelines to return, and page_token comes from a previous
  ListPipelinesResponse to indicate offset.

  Fields:
    namePrefix: Pipelines with names that match this prefix should be
      returned.
    pageSize: Number of pipelines to return at once.
    pageToken: Token to use to indicate where to start getting results.
    projectId: Required. The name of the project to search for pipelines.
      Caller must have READ access to this project.
  """

  namePrefix = _messages.StringField(1)
  pageSize = _messages.IntegerField(2, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(3)
  projectId = _messages.StringField(4)


class ListPipelinesResponse(_messages.Message):
  """The response of ListPipelines. Contains at most page_size pipelines. If
  it contains page_size pipelines, and more pipelines exist, then
  next_page_token will be populated.

  Fields:
    nextPageToken: The token to use to get the next page of results.
    pipelines: The matched pipelines.
  """

  nextPageToken = _messages.StringField(1)
  pipelines = _messages.MessageField('Pipeline', 2, repeated=True)


class LoggingOptions(_messages.Message):
  """The logging options for the pipeline run.

  Fields:
    gcsPath: The location in Google Cloud Storage to which the pipeline logs
      will be copied. Can be specified as a fully qualified directory path, in
      which case logs will be output with a unique identifier as the filename
      in that directory, or as a fully specified path, which must end in
      ".log", in which case that path will be used, and the user must ensure
      that logs are not overwritten. Stdout and stderr logs from the run are
      also generated and output as "-stdout.log" and "-stderr.log".
  """

  gcsPath = _messages.StringField(1)


class Operation(_messages.Message):
  """This resource represents a long-running operation that is the result of a
  network API call.

  Messages:
    MetadataValue: An OperationMetadata object. This will always be returned
      with the Operation.
    ResponseValue: If importing ReadGroupSets, an ImportReadGroupSetsResponse
      is returned. If importing Variants, an ImportVariantsResponse is
      returned. For exports, an empty response is returned.

  Fields:
    done: If the value is `false`, it means the operation is still in
      progress. If true, the operation is completed, and either `error` or
      `response` is available.
    error: The error result of the operation in case of failure.
    metadata: An OperationMetadata object. This will always be returned with
      the Operation.
    name: The server-assigned name, which is only unique within the same
      service that originally returns it. For example&#58; `operations
      /CJHU7Oi_ChDrveSpBRjfuL-qzoWAgEw`
    response: If importing ReadGroupSets, an ImportReadGroupSetsResponse is
      returned. If importing Variants, an ImportVariantsResponse is returned.
      For exports, an empty response is returned.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class MetadataValue(_messages.Message):
    """An OperationMetadata object. This will always be returned with the
    Operation.

    Messages:
      AdditionalProperty: An additional property for a MetadataValue object.

    Fields:
      additionalProperties: Properties of the object. Contains field @ype with
        type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a MetadataValue object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  @encoding.MapUnrecognizedFields('additionalProperties')
  class ResponseValue(_messages.Message):
    """If importing ReadGroupSets, an ImportReadGroupSetsResponse is returned.
    If importing Variants, an ImportVariantsResponse is returned. For exports,
    an empty response is returned.

    Messages:
      AdditionalProperty: An additional property for a ResponseValue object.

    Fields:
      additionalProperties: Properties of the object. Contains field @ype with
        type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a ResponseValue object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  done = _messages.BooleanField(1)
  error = _messages.MessageField('Status', 2)
  metadata = _messages.MessageField('MetadataValue', 3)
  name = _messages.StringField(4)
  response = _messages.MessageField('ResponseValue', 5)


class OperationEvent(_messages.Message):
  """An event that occurred during an Operation.

  Fields:
    description: Required description of event.
  """

  description = _messages.StringField(1)


class OperationMetadata(_messages.Message):
  """Metadata describing an Operation.

  Messages:
    RequestValue: The original request that started the operation. Note that
      this will be in current version of the API. If the operation was started
      with v1beta2 API and a GetOperation is performed on v1 API, a v1 request
      will be returned.

  Fields:
    createTime: The time at which the job was submitted to the Genomics
      service.
    events: Optional event messages that were generated during the job's
      execution. This also contains any warnings that were generated during
      import or export.
    projectId: The Google Cloud Project in which the job is scoped.
    request: The original request that started the operation. Note that this
      will be in current version of the API. If the operation was started with
      v1beta2 API and a GetOperation is performed on v1 API, a v1 request will
      be returned.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class RequestValue(_messages.Message):
    """The original request that started the operation. Note that this will be
    in current version of the API. If the operation was started with v1beta2
    API and a GetOperation is performed on v1 API, a v1 request will be
    returned.

    Messages:
      AdditionalProperty: An additional property for a RequestValue object.

    Fields:
      additionalProperties: Properties of the object. Contains field @ype with
        type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a RequestValue object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  createTime = _messages.StringField(1)
  events = _messages.MessageField('OperationEvent', 2, repeated=True)
  projectId = _messages.StringField(3)
  request = _messages.MessageField('RequestValue', 4)


class Pipeline(_messages.Message):
  """The pipeline object.

  Fields:
    description: Optional user-specified description.
    docker: A DockerExecutor attribute.
    name: Required. User-specified pipeline name. Note this does not have to
      be unique.
    parameters: Parameters that pipeline uses to run.
    pipelineId: Unique pipeline id that is generated by the service when
      CreatePipeline is called.
    projectId: Required. The project in which to create the pipeline. The
      caller must have WRITE access.
    resources: Required. Specifies resource requirements for the pipeline run.
      Minimally CPU and RAM must be specified.
  """

  description = _messages.StringField(1)
  docker = _messages.MessageField('DockerExecutor', 2)
  name = _messages.StringField(3)
  parameters = _messages.MessageField('PipelineParameter', 4, repeated=True)
  pipelineId = _messages.StringField(5)
  projectId = _messages.StringField(6)
  resources = _messages.MessageField('PipelineResources', 7)


class PipelineParameter(_messages.Message):
  """Parameters facilitate setting and delivering data into the pipeline\u2019s
  execution environment. They are specified as either inputs or outputs to the
  pipeline when it is run. A parameter can be defined either as a literal or a
  reference type. A literal parameter is one whose value, either the default
  provided at creation time or provided by the user at runtime, is passed as-
  is into the pipeline. A reference parameter is one whose value is
  interpreted as a data source or sink. Reference parameters are almost always
  required to be provided by the user at runtime. The following types of
  reference parameters are supported:  GCS objects  ==========  value =
  \u201cgs://bucket/[path]\u201d  If the parameter is a pipeline input, the value is
  interpreted as a data  source and the object(s) described by the GCS path
  will be copied into  the pipeline. Likewise, if the parameter is a pipeline
  output, it is  interpreted as a data source, and the applicable contents
  will be copied  to the GCS path indicated.   GCE disks  =================
  value = \u201cdisk://disk_name/[path]\u201d  Indicates that a persistent disk should
  be mounted into the pipeline\u2019s execution environment. The disk_name refers
  to Disk entry in the PipelineResources.Disks field of the
  RunPipelineRequest.

  Enums:
    TypeValueValuesEnum: The type of the parameter indicates how it should be
      interpreted.

  Fields:
    description: Optional human-readable description, for eventual use in
      friendly documentation and error messages.
    name: Required. Name of the parameter - the pipeline runner uses this
      string as the key to the input and output maps in RunPipeline. It is
      also used for passing the parameter into execution environments, e.g.
      the Docker executor uppercases the name and uses it as ab environment
      variable. Some execution environments may restrict the allowed
      characters.
    type: The type of the parameter indicates how it should be interpreted.
    value: Value of the parameter. If this is a LITERAL parameter, this field
      is treated as a default value to be passed to the pipeline in the
      absence of the runner providing a value for it. If this is a REFERENCE
      parameter, this field is required as it is considered the target of the
      reference provided by the pipeline runner.
  """

  class TypeValueValuesEnum(_messages.Enum):
    """The type of the parameter indicates how it should be interpreted.

    Values:
      TYPE_UNSPECIFIED: <no description>
      LITERAL: A literal parameter is passed as-is into the pipeline\u2019s
        execution environment. For example, literals makes sense for setting
        environment variables in a Docker container.
      REFERENCE: A reference parameter is a means for pipeline runners to
        provide data at fixed locations in the pipeline\u2019s execution
        environment. For example, references enable users to provide data from
        sources like GCS objects and GCE persistent disks to a Docker
        container for processing.
    """
    TYPE_UNSPECIFIED = 0
    LITERAL = 1
    REFERENCE = 2

  description = _messages.StringField(1)
  name = _messages.StringField(2)
  type = _messages.EnumField('TypeValueValuesEnum', 3)
  value = _messages.StringField(4)


class PipelineResources(_messages.Message):
  """The system resources for the pipeline run.

  Fields:
    disks: Disks to attach.
    minimumCpuCores: The minimum number of cores to use.
    minimumRamGb: The minimum amount of RAM to use.
    preemptible: If applicable, preemptible machines may be used for the run.
    zones: List of Google Compute Engine availability zones to which resource
      creation will restricted.
  """

  disks = _messages.MessageField('Disk', 1, repeated=True)
  minimumCpuCores = _messages.IntegerField(2)
  minimumRamGb = _messages.FloatField(3)
  preemptible = _messages.BooleanField(4)
  zones = _messages.StringField(5, repeated=True)


class RunPipelineArgs(_messages.Message):
  """The pipeline run arguments.

  Messages:
    InputsValue: Pipeline input arguments; keys are defined in the pipeline
      documentation.
    OutputsValue: Pipeline output arguments; keys are defined in the pipeline
      documentation.

  Fields:
    clientId: Optional for callers to use in filtering operations returned by
      this request.
    inputs: Pipeline input arguments; keys are defined in the pipeline
      documentation.
    logging: Required. Logging options. Used by the service to communicate
      results to the user.
    outputs: Pipeline output arguments; keys are defined in the pipeline
      documentation.
    projectId: Required. The project in which to run the pipeline. The caller
      must have WRITER access to all Google Cloud services and resources (e.g.
      Google Compute Engine) will be used.
    resources: Specifies resource requirements/overrides for the pipeline run.
    serviceAccount: Required. The Google Cloud Service Account that will be
      used to access data and services.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class InputsValue(_messages.Message):
    """Pipeline input arguments; keys are defined in the pipeline
    documentation.

    Messages:
      AdditionalProperty: An additional property for a InputsValue object.

    Fields:
      additionalProperties: Additional properties of type InputsValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a InputsValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  @encoding.MapUnrecognizedFields('additionalProperties')
  class OutputsValue(_messages.Message):
    """Pipeline output arguments; keys are defined in the pipeline
    documentation.

    Messages:
      AdditionalProperty: An additional property for a OutputsValue object.

    Fields:
      additionalProperties: Additional properties of type OutputsValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a OutputsValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  clientId = _messages.StringField(1)
  inputs = _messages.MessageField('InputsValue', 2)
  logging = _messages.MessageField('LoggingOptions', 3)
  outputs = _messages.MessageField('OutputsValue', 4)
  projectId = _messages.StringField(5)
  resources = _messages.MessageField('PipelineResources', 6)
  serviceAccount = _messages.MessageField('ServiceAccount', 7)


class RunPipelineRequest(_messages.Message):
  """The request to run a pipeline. If pipeline_id is specified, it refers to
  a saved pipeline created with CreatePipeline and set as the pipeline_id of
  the returned Pipeline object. If a pipeline object is specified, that
  pipeline is run once with the given args and then deleted. It is an error to
  specify both pipeline_id and pipeline. RunPipelineArgs must be specified.

  Fields:
    ephemeralPipeline: A new pipeline object to run once and then delete.
    pipelineArgs: The arguments to use when running this pipeline.
    pipelineId: The already created pipeline to run.
  """

  ephemeralPipeline = _messages.MessageField('Pipeline', 1)
  pipelineArgs = _messages.MessageField('RunPipelineArgs', 2)
  pipelineId = _messages.StringField(3)


class ServiceAccount(_messages.Message):
  """A Google Cloud Service Account.

  Fields:
    email: Required. Email address of the service account.
    scopes: Required. List of scopes to be made available for this service
      account.
  """

  email = _messages.StringField(1)
  scopes = _messages.StringField(2, repeated=True)


class StandardQueryParameters(_messages.Message):
  """Query parameters accepted by all methods.

  Enums:
    FXgafvValueValuesEnum: V1 error format.
    AltValueValuesEnum: Data format for response.

  Fields:
    f__xgafv: V1 error format.
    access_token: OAuth access token.
    alt: Data format for response.
    bearer_token: OAuth bearer token.
    callback: JSONP
    fields: Selector specifying which fields to include in a partial response.
    key: API key. Your API key identifies your project and provides you with
      API access, quota, and reports. Required unless you provide an OAuth 2.0
      token.
    oauth_token: OAuth 2.0 token for the current user.
    pp: Pretty-print response.
    prettyPrint: Returns response with indentations and line breaks.
    quotaUser: Available to use for quota purposes for server-side
      applications. Can be any arbitrary string assigned to a user, but should
      not exceed 40 characters.
    trace: A tracing token of the form "token:<tokenid>" to include in api
      requests.
    uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
    upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
  """

  class AltValueValuesEnum(_messages.Enum):
    """Data format for response.

    Values:
      json: Responses with Content-Type of application/json
      media: Media download with context-dependent Content-Type
      proto: Responses with Content-Type of application/x-protobuf
    """
    json = 0
    media = 1
    proto = 2

  class FXgafvValueValuesEnum(_messages.Enum):
    """V1 error format.

    Values:
      _1: v1 error format
      _2: v2 error format
    """
    _1 = 0
    _2 = 1

  f__xgafv = _messages.EnumField('FXgafvValueValuesEnum', 1)
  access_token = _messages.StringField(2)
  alt = _messages.EnumField('AltValueValuesEnum', 3, default=u'json')
  bearer_token = _messages.StringField(4)
  callback = _messages.StringField(5)
  fields = _messages.StringField(6)
  key = _messages.StringField(7)
  oauth_token = _messages.StringField(8)
  pp = _messages.BooleanField(9, default=True)
  prettyPrint = _messages.BooleanField(10, default=True)
  quotaUser = _messages.StringField(11)
  trace = _messages.StringField(12)
  uploadType = _messages.StringField(13)
  upload_protocol = _messages.StringField(14)


class Status(_messages.Message):
  """The `Status` type defines a logical error model that is suitable for
  different programming environments, including REST APIs and RPC APIs. It is
  used by [gRPC](https://github.com/grpc). The error model is designed to be:
  - Simple to use and understand for most users - Flexible enough to meet
  unexpected needs  # Overview  The `Status` message contains three pieces of
  data: error code, error message, and error details. The error code should be
  an enum value of google.rpc.Code, but it may accept additional error codes
  if needed.  The error message should be a developer-facing English message
  that helps developers *understand* and *resolve* the error. If a localized
  user-facing error message is needed, put the localized message in the error
  details or localize it in the client. The optional error details may contain
  arbitrary information about the error. There is a predefined set of error
  detail types in the package `google.rpc` which can be used for common error
  conditions.  # Language mapping  The `Status` message is the logical
  representation of the error model, but it is not necessarily the actual wire
  format. When the `Status` message is exposed in different client libraries
  and different wire protocols, it can be mapped differently. For example, it
  will likely be mapped to some exceptions in Java, but more likely mapped to
  some error codes in C.  # Other uses  The error model and the `Status`
  message can be used in a variety of environments, either with or without
  APIs, to provide a consistent developer experience across different
  environments.  Example uses of this error model include:  - Partial errors.
  If a service needs to return partial errors to the client,     it may embed
  the `Status` in the normal response to indicate the partial     errors.  -
  Workflow errors. A typical workflow has multiple steps. Each step may
  have a `Status` message for error reporting purpose.  - Batch operations. If
  a client uses batch request and batch response, the     `Status` message
  should be used directly inside batch response, one for     each error sub-
  response.  - Asynchronous operations. If an API call embeds asynchronous
  operation     results in its response, the status of those operations should
  be     represented directly using the `Status` message.  - Logging. If some
  API errors are stored in logs, the message `Status` could     be used
  directly after any stripping needed for security/privacy reasons.

  Messages:
    DetailsValueListEntry: A DetailsValueListEntry object.

  Fields:
    code: The status code, which should be an enum value of google.rpc.Code.
    details: A list of messages that carry the error details.  There will be a
      common set of message types for APIs to use.
    message: A developer-facing error message, which should be in English. Any
      user-facing error message should be localized and sent in the
      google.rpc.Status.details field, or localized by the client.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class DetailsValueListEntry(_messages.Message):
    """A DetailsValueListEntry object.

    Messages:
      AdditionalProperty: An additional property for a DetailsValueListEntry
        object.

    Fields:
      additionalProperties: Properties of the object. Contains field @ype with
        type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a DetailsValueListEntry object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  code = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  details = _messages.MessageField('DetailsValueListEntry', 2, repeated=True)
  message = _messages.StringField(3)


encoding.AddCustomJsonFieldMapping(
    StandardQueryParameters, 'f__xgafv', '$.xgafv',
    package=u'genomics')
encoding.AddCustomJsonEnumMapping(
    StandardQueryParameters.FXgafvValueValuesEnum, '_1', '1',
    package=u'genomics')
encoding.AddCustomJsonEnumMapping(
    StandardQueryParameters.FXgafvValueValuesEnum, '_2', '2',
    package=u'genomics')
